{"/home/travis/build/npmtest/node-npmtest-alexa-app-server/test.js":"/* istanbul instrument in package npmtest_alexa_app_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alexa-app-server/lib.npmtest_alexa_app_server.js":"/* istanbul instrument in package npmtest_alexa_app_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_alexa_app_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_alexa_app_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-alexa-app-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-alexa-app-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_alexa_app_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_alexa_app_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_alexa_app_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_alexa_app_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_alexa_app_server.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_alexa_app_server.__dirname +\n                    '/lib.npmtest_alexa_app_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alexa-app-server/node_modules/alexa-app-server/index.js":"var hotswap = require('hotswap');\nvar fs = require('fs');\nvar path = require('path');\nvar http = require('http');\nvar https = require('https');\nvar express = require('express');\nvar alexa = require('alexa-app');\nvar Promise = require('bluebird');\nvar defaults = require(\"lodash.defaults\");\nvar utils = require(\"./utils\");\n\nvar appServer = function(config) {\n  var self = {};\n  config = config || {};\n\n  var defaultOptions = {\n    log: true,\n    debug: true,\n    verify: false,\n    port: process.env.port || 8080,\n    httpEnabled: true,\n    httpsEnabled: false,\n    public_html: 'public_html',\n    server_dir: 'server',\n    server_root: '.',\n    app_root: 'alexa',\n    app_dir: 'apps'\n  };\n\n  self.config = defaults(config, defaultOptions);\n\n  if (self.config.verify && self.config.debug) {\n    throw new Error(\"invalid configuration: the verify and debug options cannot be both enabled\");\n  }\n\n  if (!self.config.httpEnabled && !self.config.httpsEnabled) {\n    throw new Error(\"invalid configuration: either http or https must be enabled\");\n  }\n\n  if (self.config.httpEnabled && self.config.httpsEnabled && self.config.port == self.config.httpsPort) {\n    throw new Error(\"invalid configuration: http and https ports must be different\");\n  }\n\n  self.apps = {};\n\n  self.log = function(msg) {\n    if (self.config.log) {\n      console.log(msg);\n    }\n  };\n\n  self.error = function(msg) {\n    console.error(msg);\n  };\n\n  // configure hotswap to watch for changes and swap out module code\n  var hotswapCallback = function(filename) {\n    self.log(\"hotswap reloaded \" + filename);\n  };\n\n  var errorCallback = function(e) {\n    self.error(\"-----\\nhotswap error: \" + e + \"\\n-----\\n\");\n  };\n\n  hotswap.on('swap', hotswapCallback);\n  hotswap.on('error', errorCallback);\n\n  // load application modules\n  self.load_apps = function(app_dir, root) {\n    // set up a router to hang all alexa apps off of\n    var alexaRouter = express.Router();\n\n    var normalizedRoot = utils.normalizeApiPath(root);\n    self.express.use(normalizedRoot, alexaRouter);\n\n    var app_directories = function(srcpath) {\n      return fs.readdirSync(srcpath).filter(function(file) {\n        return utils.isValidDirectory(path.join(srcpath, file));\n      });\n    };\n\n    app_directories(app_dir).forEach(function(dir) {\n      var package_json = path.join(app_dir, dir, \"package.json\");\n      if (!utils.isValidFile(package_json)) {\n        self.error(\"   package.json not found in directory \" + dir);\n        return;\n      }\n\n      var pkg = utils.readJsonFile(package_json);\n      if (!pkg || !pkg.main || !pkg.name) {\n        self.error(\"   failed to load \" + package_json);\n        return;\n      }\n\n      var main = fs.realpathSync(path.join(app_dir, dir, pkg.main));\n      if (!utils.isValidFile(main)) {\n        self.error(\"   main file not found for app [\" + pkg.name + \"]: \" + main);\n        return;\n      }\n\n      var app;\n      try {\n        app = require(main);\n      } catch (e) {\n        self.error(\"   error loading app [\" + main + \"]: \" + e);\n        return;\n      }\n\n      self.apps[pkg.name] = pkg;\n      self.apps[pkg.name].exports = app;\n      if (typeof app.express != \"function\") {\n        self.error(\"   app [\" + pkg.name + \"] is not an instance of alexa-app\");\n        return;\n      }\n\n      // extract Alexa-specific attributes from package.json, if they exist\n      if (typeof pkg.alexa == \"object\") {\n        app.id = pkg.alexa.applicationId;\n      }\n\n      // attach the alexa-app instance to the alexa router\n      app.express({\n        expressApp: alexaRouter,\n        debug: self.config.debug,\n        checkCert: self.config.verify,\n        preRequest: self.config.preRequest,\n        postRequest: self.config.postRequest\n      });\n\n      var endpoint = path.posix.join(normalizedRoot, app.name);\n      self.log(\"   loaded app [\" + pkg.name + \"] at endpoint: \" + endpoint);\n    });\n\n    return self.apps;\n  };\n\n  // load server modules, eg. code that processes forms, anything that wants to hook into express\n  self.load_server_modules = function(server_dir) {\n    var server_files = function(srcpath) {\n      return fs.readdirSync(srcpath).filter(function(file) {\n        return utils.isValidFile(path.join(srcpath, file));\n      });\n    };\n    server_files(server_dir).forEach(function(file) {\n      file = fs.realpathSync(path.join(server_dir, file));\n      self.log(\"   loaded \" + file);\n      var func = require(file);\n      if (typeof func == \"function\") {\n        func(self.express, self);\n      }\n    });\n  };\n\n  // start the server\n  self.start = function() {\n    self.express = express();\n\n    self.express.set('views', path.join(__dirname, 'views'));\n    self.express.set('view engine', 'ejs');\n    self.express.use(express.static(path.join(__dirname, 'views')));\n\n    if (typeof self.config.pre == \"function\") {\n      self.config.pre(self);\n    }\n\n    // serve static content\n    var static_dir = path.join(self.config.server_root, self.config.public_html);\n    if (utils.isValidDirectory(static_dir)) {\n      self.log(\"serving static content from: \" + static_dir);\n      self.express.use(express.static(static_dir));\n    } else {\n      self.log(\"not serving static content because directory [\" + static_dir + \"] does not exist\");\n    }\n\n    // find any server-side processing modules and let them hook in\n    var server_dir = path.join(self.config.server_root, self.config.server_dir);\n    if (utils.isValidDirectory(server_dir)) {\n      self.log(\"loading server-side modules from: \" + server_dir);\n      self.load_server_modules(server_dir);\n    } else {\n      self.log(\"no server modules loaded because directory [\" + server_dir + \"] does not exist\");\n    }\n\n    // find and load alexa-app modules\n    var app_dir = path.join(self.config.server_root, self.config.app_dir);\n    if (utils.isValidDirectory(app_dir)) {\n      self.log(\"loading apps from: \" + app_dir);\n      self.load_apps(app_dir, self.config.app_root);\n    } else {\n      self.log(\"apps not loaded because directory [\" + app_dir + \"] does not exist\");\n    }\n\n    if (self.config.httpsEnabled) {\n      self.log(\"enabling https\");\n\n      if (self.config.privateKey != undefined && self.config.certificate != undefined && self.config.httpsPort != undefined) {\n        var sslCertRoot = path.join(self.config.server_root, 'sslcert');\n        var privateKeyFile = path.join(sslCertRoot, self.config.privateKey);\n        var certificateFile = path.join(sslCertRoot, self.config.certificate);\n        var chainFile = (self.config.chain != undefined) ? path.join(sslCertRoot, self.config.chain) : undefined;\n\n        if (utils.isValidFile(privateKeyFile) && utils.isValidFile(certificateFile)) {\n          var privateKey = utils.readFile(privateKeyFile);\n          var certificate = utils.readFile(certificateFile);\n\n          var chain = undefined;\n          if (chainFile != undefined) {\n            if (utils.isValidFile(chainFile)) {\n              chain = utils.readFile(chainFile);\n            } else {\n              self.error(\"chain: '\" + self.config.chain + \"' does not exist in \" + sslCertRoot);\n            }\n          }\n\n          if (chain == undefined && chainFile != undefined) {\n            self.error(\"failed to load chain from \" + sslCertRoot + \", https will not be enabled\");\n          } else if (privateKey != undefined && certificate != undefined) {\n            var credentials = {\n              key: privateKey,\n              cert: certificate\n            };\n\n            if (self.config.passphrase != undefined) {\n              credentials.passphrase = self.config.passphrase\n            }\n\n            if (chain != undefined) {\n              credentials.ca = chain;\n              self.log(\"using chain certificate from \" + sslCertRoot);\n            }\n\n            try {\n              // this can fail it the certs were generated incorrectly\n              var httpsServer = https.createServer(credentials, self.express);\n\n              if (typeof config.host === 'string') {\n                self.httpsInstance = httpsServer.listen(self.config.httpsPort, self.config.host);\n                self.log(\"listening on https://\" + self.config.host + \":\" + self.config.httpsPort);\n              } else {\n                self.httpsInstance = httpsServer.listen(self.config.httpsPort);\n                self.log(\"listening on https port \" + self.config.httpsPort);\n              }\n            } catch (error) {\n              self.error(\"failed to listen via https: \" + error);\n            }\n          } else {\n            self.error(\"failed to load privateKey or certificate from \" + sslCertRoot + \", https will not be enabled\");\n          }\n        } else {\n          self.error(\"privateKey: '\" + self.config.privateKey + \"' or certificate: '\" + self.config.certificate + \"' do not exist in \" + sslCertRoot + \", https will not be enabled\");\n        }\n      } else {\n        self.error(\"httpsPort, privateKey or certificate parameter is not set in config, https will not be enabled\");\n      }\n    }\n\n    if (self.config.httpEnabled) {\n      if (typeof config.host === 'string') {\n        self.instance = self.express.listen(self.config.port, self.config.host);\n        self.log(\"listening on http://\" + self.config.host + \":\" + self.config.port);\n      } else {\n        self.instance = self.express.listen(self.config.port);\n        self.log(\"listening on http port \" + self.config.port);\n      }\n    }\n\n    if (typeof self.config.post == \"function\") {\n      self.config.post(self);\n    }\n\n    return this;\n  };\n\n  // close all server instances\n  self.stop = function() {\n    if (typeof self.instance !== \"undefined\") {\n      self.instance.close();\n    }\n\n    if (typeof self.httpsInstance !== \"undefined\") {\n      self.httpsInstance.close();\n    }\n\n    // deactivate all hotswap listener\n    hotswap.removeListener('swap', hotswapCallback);\n    hotswap.removeListener('error', errorCallback);\n  };\n\n  return self;\n};\n\n// a shortcut start(config) method to avoid creating an instance if not needed\nappServer.start = function(config) {\n  var appServerInstance = new appServer(config);\n  appServerInstance.start();\n  return appServerInstance;\n};\n\nmodule.exports = appServer;\n"}